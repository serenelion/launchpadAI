name: Test Deployment

on:
  push:
    branches: [ test ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ toLower(github.repository) }}

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Deploy to Test
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.TEST_DROPLET_HOST }}
        username: ${{ secrets.TEST_DROPLET_USERNAME }}
        key: ${{ secrets.TEST_DROPLET_SSH_KEY }}
        script: |
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Ensure deployment directory exists
          mkdir -p /var/www/launchpad-ai-test
          
          # Create docker-compose file
          cat > /var/www/launchpad-ai-test/docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            app:
              image: ghcr.io/${GITHUB_REPOSITORY}/test:latest
              restart: always
              environment:
                - NODE_ENV=test
              ports:
                - "3000:3000"
              volumes:
                - /var/www/launchpad-ai-test/uploads:/app/uploads
          EOF
          
          # Deploy the application
          cd /var/www/launchpad-ai-test
          docker-compose pull
          docker-compose up -d 